name: Performance Testing

on:
  pull_request:
    branches: [ main, master ]

jobs:
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build demo
      run: npm run build:demo
      
    - name: Start demo server
      run: |
        cd demo/dist
        npx serve -s . -l 3000 &
        sleep 10
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: './.lighthouserc.json'
        
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read Lighthouse results
          const resultsPath = '.lighthouseci/lhr/';
          const files = fs.readdirSync(resultsPath);
          
          let comment = '## ðŸš€ Performance Report\n\n';
          
          files.forEach(file => {
            if (file.endsWith('.json')) {
              const data = JSON.parse(fs.readFileSync(resultsPath + file, 'utf8'));
              const scores = data.lhr.categories;
              
              comment += `### ${data.lhr.finalUrl}\n\n`;
              comment += '| Metric | Score |\n';
              comment += '|--------|-------|\n';
              comment += `| Performance | ${Math.round(scores.performance.score * 100)} |\n`;
              comment += `| Accessibility | ${Math.round(scores.accessibility.score * 100)} |\n`;
              comment += `| Best Practices | ${Math.round(scores['best-practices'].score * 100)} |\n`;
              comment += `| SEO | ${Math.round(scores.seo.score * 100)} |\n\n`;
            }
          });
          
          comment += '> Performance analysis generated automatically for this PR.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
